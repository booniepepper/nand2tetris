// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    Not(out=hi);

    // What to read or (maybe) load
    DMux4Way(in=hi, sel=address[13..14], a=selMain1, b=selMain2, c=selScreen);
    Or(a=selMain1, b=selMain2, out=selMain);
    And(a=selMain, b=load, out=loadMain);
    And(a=selScreen, b=load, out=loadScreen);

    // Keyboard -- Must be: 110 0000 0000 0000
    Or8Way(in=address[0..7], out=failKbdLo);
    Or8Way(in[0..4]=address[8..12], out=failKbdHi);
    Or(a=failKbdLo, b=failKbdHi, out=failKbd);
    Not(in=failKbd, out=selKbd);

    // Ok the memory:
    RAM16K(in=in, load=loadMain, address=address[0..13], out=mainMem);
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenMem);
    Keyboard(out=keyboardMem);

    // Output select:
    Mux16(b=mainMem, sel=selMain, out=mainOut);
    Mux16(b=screenMem, sel=selScreen, out=screenOut);
    Or16(a=mainOut, b=screenOut, out=mainOrScreenOut);
    Mux16(b=keyboardMem, sel=selKbd, out=keyboardOut);
    Or16(a=mainOrScreenOut, b=keyboardOut, out=out);
}
