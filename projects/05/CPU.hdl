// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // compute

    // Decide D
    DRegister(in=aluOut, load=writeD, out=currD);

    // Decide A
    Mux16(a[0..14]=aiConst, b=aluOut, sel=aOrCInstruction, out=nextA);
    Register(in=nextA, load=writeA, out=currA, out[0..14]=addressM);

    // Decide A or M (val/ref)
    Mux16(a=currA, b=inM, sel=aOrM, out[0..14]=currAM);
    
    // Maybe write M

    ALU(
        // in
        x=currD,
        zx=zeroD,
        nx=negaD,
        
        y[0..14]=currAM,
        zy=zeroAM,
        ny=negaAM,

        f=plusOrAnd,
        no=negaAluOut,

        // out
        out=outM,
        out=aluOut,
        zr=aluWasZero,
        ng=aluWasNega
    );

    // control

    // Decode as A instruction (const) or C instruction (command)
    // A: 0nnn nnnn nnnn nnnn // n = binary digits
    // C: 1xxa cccc ccdd djjj // a = a/m, c = comp, d = dest, j = jump

    Or16(
        a=instruction,

        /* *** out *** */

        out[15]=aOrCInstruction,
        
        out[0..14]=aiConst,

        out[12]=aOrM,

        // comp
        out[11]=zeroD,
        out[10]=negaD,
        out[9]=zeroAM,
        out[8]=negaAM,
        out[7]=plusOrAnd,
        out[6]=negaAluOut,

        // dest
        out[5]=ifCWriteA,
        out[4]=ifCWriteD,
        out[3]=ifCWriteM,

        // jump
        out[2]=shouldJL,
        out[1]=shouldJZ,
        out[0]=shouldJG
    );
 
    And(a=aOrCInstruction, b=ifCWriteD, out=writeD);
    
    Not(in=aOrCInstruction, out=aInstruction);
    Or(a=aInstruction, b=ifCWriteA, out=writeA);
    
    And(a=aOrCInstruction, b=ifCWriteM, out=writeM);

    // pc (program counter: line to execute)

    Not(in=aluWasZero, out=aluNotZero);
    Not(in=aluWasNega, out=aluNotNega);
    And(a=aluNotZero, b=aluNotNega, out=aluWasPosi);

    And(a=aluWasNega, b=shouldJL, out=jumpL);
    And(a=aluWasZero, b=shouldJZ, out=jumpZ);
    And(a=aluWasPosi, b=shouldJG, out=jumpG);

    Or8Way(in[0]=jumpL, in[1]=jumpZ, in[2]=jumpG, out=maybeJump);
    And(a=aOrCInstruction, b=maybeJump, out=shouldJump);
    Not(in=shouldJump, out=shouldIncr);

    PC(in=currA, inc=shouldIncr, load=shouldJump, reset=reset, out[0..14]=pc);
}
